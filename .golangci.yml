run:
  timeout: 5m

linters:
  disable-all: true
  enable:
    # - cyclop # Measuring code complexity is hard. Cyclomatic complexity is doubtfully a reliable metric for this purpose. Some problems are complex by nature and therefore more cyclomatically complex code might actually be simpler.
    # - deadcode # deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused.
    # - exhaustivestruct We frequently make use of zero-values and partial initialization.
    # - godox # TODOs and FIXMEs function as a big warning sign: "Beware! This code has bugs and other problems. Be careful not to make things worse when editing. Or better fix the issues before implementing a new feature on top.". The idea of [`godox` comment extractor](https://github.com/766b/godox) seems to be different from the idea of [`godox` linter](https://github.com/matoous/godox). The first one lets you quickly browse through the code problems, while the second one asks you to remove that big warning sign in favor of tasks. Though tasks are great, they will not help you while editing.
    # - golint # Replaced by `revive`.
    # - ifshort # deprecated (since v1.48.0) due to: The repository of the linter has been deprecated by the owner.
    # - interfacer # Is prone to bad suggestions (officialy deprecated).
    # - ireturn # See: https://github.com/go-proverbs/go-proverbs.github.io/issues/37.
    # - maligned # Replaced by `govet`'s `fieldalignment`
    # - nlreturn # Too subjective.
    # - scopelint # Replaced by `exportloopref`.
    # - structcheck # deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter.  Replaced by unused.
    # - varcheck # deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter.  Replaced by unused.
    # - varnamelen # Though the idea is idiomatic, the length is not the only thing that determines whether a variable is "easy to use".
    # - wrapcheck # Is prone to bad suggestions (especially see issue #1).
    # - wsl # Too aggressive. Might be useful if it could do auto fix.
    - asciicheck
    - bidichk
    - bodyclose
    - contextcheck
    - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errname
    - errorlint
    - exhaustive
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - importas
    - ineffassign
    - lll
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil # Zero-value of maps, slices and channels is `nil` but useful.
    - noctx
    - nolintlint
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - wastedassign
    - whitespace

linters-settings:
  forbidigo:
    forbid:
      - os.Exit # it's not safe to exit in random places, because defer will not work.
      - log.Fatal.* # it calls os.Exit (see above)
  funlen:
    lines: -1
  lll:
    line-length: 110
  gci:
    local-prefixes: github.com/Enapter/telemetry-grafana-datasource-plugin
  nilnil:
    checked-types:
      - ptr
      - func
      - iface
  nolintlint:
    require-explanation: true
    require-specific: true
  gocritic:
    disabled-checks:
      - ifElseChain
  tagliatelle:
    case:
      use-field-name: false
      rules:
        json: snake
        yaml: snake

issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - forcetypeassert # it's ok to have some type risks in tests
        - gosec # security is not make sense in tests
        - noctx # it's ok to do simple http request without context in tests

    # Exclude lll issues for long lines with go:generate.
    - linters:
        - lll
      source: "^//go:generate "

    # Internal import paths can be long.
    - linters:
        - lll
      source: "github.com/Enapter/grafana-plugins"

    # Links to articles can be long.
    - linters:
        - lll
      source: "//.*(http|https)://"

    # We have a lot of undocumented types and methods.
    - linters:
        - revive
      text: should have comment .*or be unexported

      # False positives.
      #
      # For example, there are two variables `k` and `v`. Each has its own
      # index in some slice. If indices are called `kIndex` and `vIndex` then
      # `revive` considers prefix `k` in `kIndex` a sign of hungarian notation.
    - linters:
        - revive
      text: "var-naming: don't use leading .+ in Go names"

    # We allow to os.Exit in main, tests, scripts and generators.
    - path: main.go|main_test.go
      linters:
        - forbidigo
      text: "forbidden by pattern `os.Exit`"
